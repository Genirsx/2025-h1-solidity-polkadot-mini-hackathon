/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CryptoMarketRegistry {
  export type CoinInfoStruct = {
    name: string;
    symbol: string;
    price: BigNumberish;
    priceChange: BigNumberish;
    lastUpdated: BigNumberish;
    isActive: boolean;
  };

  export type CoinInfoStructOutput = [
    name: string,
    symbol: string,
    price: bigint,
    priceChange: bigint,
    lastUpdated: bigint,
    isActive: boolean
  ] & {
    name: string;
    symbol: string;
    price: bigint;
    priceChange: bigint;
    lastUpdated: bigint;
    isActive: boolean;
  };
}

export interface CryptoMarketRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeSymbols"
      | "coins"
      | "deactivateCoin"
      | "getAllActiveCoins"
      | "getCoinBySymbol"
      | "owner"
      | "registerCoin"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCoinPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CoinDeactivated"
      | "CoinRegistered"
      | "CoinUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeSymbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deactivateCoin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoinBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerCoin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoinPrice",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoinBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoinPrice",
    data: BytesLike
  ): Result;
}

export namespace CoinDeactivatedEvent {
  export type InputTuple = [symbol: string];
  export type OutputTuple = [symbol: string];
  export interface OutputObject {
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinRegisteredEvent {
  export type InputTuple = [symbol: string, name: string];
  export type OutputTuple = [symbol: string, name: string];
  export interface OutputObject {
    symbol: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinUpdatedEvent {
  export type InputTuple = [
    symbol: string,
    newPrice: BigNumberish,
    priceChange: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    symbol: string,
    newPrice: bigint,
    priceChange: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    symbol: string;
    newPrice: bigint;
    priceChange: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CryptoMarketRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CryptoMarketRegistry;
  waitForDeployment(): Promise<this>;

  interface: CryptoMarketRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeSymbols: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  coins: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        name: string;
        symbol: string;
        price: bigint;
        priceChange: bigint;
        lastUpdated: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  deactivateCoin: TypedContractMethod<[symbol: string], [void], "nonpayable">;

  getAllActiveCoins: TypedContractMethod<
    [],
    [CryptoMarketRegistry.CoinInfoStructOutput[]],
    "view"
  >;

  getCoinBySymbol: TypedContractMethod<
    [symbol: string],
    [CryptoMarketRegistry.CoinInfoStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerCoin: TypedContractMethod<
    [symbol: string, name: string, initialPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCoinPrice: TypedContractMethod<
    [symbol: string, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeSymbols"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "coins"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        name: string;
        symbol: string;
        price: bigint;
        priceChange: bigint;
        lastUpdated: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateCoin"
  ): TypedContractMethod<[symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveCoins"
  ): TypedContractMethod<
    [],
    [CryptoMarketRegistry.CoinInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoinBySymbol"
  ): TypedContractMethod<
    [symbol: string],
    [CryptoMarketRegistry.CoinInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerCoin"
  ): TypedContractMethod<
    [symbol: string, name: string, initialPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCoinPrice"
  ): TypedContractMethod<
    [symbol: string, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CoinDeactivated"
  ): TypedContractEvent<
    CoinDeactivatedEvent.InputTuple,
    CoinDeactivatedEvent.OutputTuple,
    CoinDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "CoinRegistered"
  ): TypedContractEvent<
    CoinRegisteredEvent.InputTuple,
    CoinRegisteredEvent.OutputTuple,
    CoinRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "CoinUpdated"
  ): TypedContractEvent<
    CoinUpdatedEvent.InputTuple,
    CoinUpdatedEvent.OutputTuple,
    CoinUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CoinDeactivated(string)": TypedContractEvent<
      CoinDeactivatedEvent.InputTuple,
      CoinDeactivatedEvent.OutputTuple,
      CoinDeactivatedEvent.OutputObject
    >;
    CoinDeactivated: TypedContractEvent<
      CoinDeactivatedEvent.InputTuple,
      CoinDeactivatedEvent.OutputTuple,
      CoinDeactivatedEvent.OutputObject
    >;

    "CoinRegistered(string,string)": TypedContractEvent<
      CoinRegisteredEvent.InputTuple,
      CoinRegisteredEvent.OutputTuple,
      CoinRegisteredEvent.OutputObject
    >;
    CoinRegistered: TypedContractEvent<
      CoinRegisteredEvent.InputTuple,
      CoinRegisteredEvent.OutputTuple,
      CoinRegisteredEvent.OutputObject
    >;

    "CoinUpdated(string,uint256,int256,uint256)": TypedContractEvent<
      CoinUpdatedEvent.InputTuple,
      CoinUpdatedEvent.OutputTuple,
      CoinUpdatedEvent.OutputObject
    >;
    CoinUpdated: TypedContractEvent<
      CoinUpdatedEvent.InputTuple,
      CoinUpdatedEvent.OutputTuple,
      CoinUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
